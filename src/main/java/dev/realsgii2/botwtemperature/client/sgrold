package dev.realsgii2.botwtemperature.client;

import net.minecraft.client.Minecraft;
import net.minecraft.client.entity.player.ClientPlayerEntity;
import net.minecraft.client.gui.AbstractGui;
import net.minecraft.client.renderer.BufferBuilder;
import net.minecraft.client.renderer.GameRenderer;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.WorldVertexBufferUploader;
import net.minecraft.client.renderer.texture.TextureManager;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.SoundCategory;
import net.minecraft.util.SoundEvent;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.client.event.RenderGameOverlayEvent;
import net.minecraftforge.event.entity.PlaySoundAtEntityEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventBusSubscriber.Bus;

import com.mojang.blaze3d.matrix.MatrixStack;
import com.mojang.blaze3d.platform.GlStateManager;
import com.mojang.blaze3d.systems.RenderSystem;

import dev.realsgii2.botwtemperature.util.Color;
import dev.realsgii2.botwtemperature.util.Interpolator;
import io.netty.util.internal.ThreadLocalRandom;

import static dev.realsgii2.botwtemperature.TemperatureMod.LOGGER;
import static dev.realsgii2.botwtemperature.TemperatureMod.MODID;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import org.lwjgl.opengl.GL11;

@Mod.EventBusSubscriber(modid = MODID, bus = Bus.FORGE, value = { Dist.CLIENT })
public class SoundGaugeRenderer {
    private static final Integer SIZE = 20;
    private static final Integer RADIUS = SIZE / 2;

    private static final Color BACKGROUND_COLOR = Color.of(0, 0, 0, 150);
    private static final Color LINE_COLOR = Color.of(224, 116, 206);

    private static double currentVolume = 1;
    private static String lastSoundPath = "";

    private static ResourceLocation gaugeImage = new ResourceLocation(MODID, "textures/gauge/sound_gauge.png");
    private static ResourceLocation gaugeImageWhite = new ResourceLocation(MODID, "textures/gauge/sound_gauge_t.png");

    private static List<String> whitelistedSounds = new ArrayList<String>() {
        {
            add(".close");
            add(".open");
            add(".burp");

            add(".player.hurt");
            add(".player.splash");
            add(".player.swim");
            add(".player.hurt");
        }
    };

    private static List<String> whitelistedPlayerOnlySounds = new ArrayList<String>() {
        {
            add(".step");
            add(".fall");
            add(".break");
            add(".place");
        }
    };

    private static BlockPos lastPlayerPosition;

    private static Double[] points = new Double[] {
            0.0
    };

    private static Double[] currentPoints = new Double[] {
            0.0
    };

    private static final Random random = new Random();

    private static int getRandom(int min, int max) {
        return random.nextInt(max - min) + min;
    }

    // @SubscribeEvent
    public static void soundEvent(PlaySoundAtEntityEvent event) {
        boolean considerSound = false;

        String soundPath = event.getSound().getRegistryName().getPath();
        ClientPlayerEntity player = Minecraft.getInstance().player;

        for (String sound : whitelistedSounds) {
            if (considerSound)
                break;
            if (soundPath.indexOf(sound) != -1)
                considerSound = true;
        }

        if (event.getEntity() == player)
            for (String sound : whitelistedPlayerOnlySounds) {
                if (considerSound)
                    break;
                if (soundPath.indexOf(sound) != -1)
                    considerSound = true;
            }

        if (considerSound && event.getVolume() > currentVolume) {
            currentVolume = 1.0;
            lastSoundPath = event.getSound().getRegistryName().getPath();
        }
    }

    private static double random() {
        return ThreadLocalRandom.current().nextDouble(-1.0, 1.0) * currentVolume;
    }

    // @SubscribeEvent
    @SuppressWarnings({ "deprecation" })
    public static void afterGameOverlayRender(RenderGameOverlayEvent.Post event) {
        ClientPlayerEntity player = Minecraft.getInstance().player;

        if (lastPlayerPosition == null || player.blockPosition().distSqr(lastPlayerPosition) > 0.25)
        {
            lastPlayerPosition = player.blockPosition();

            if (player.isOnGround() || player.isSwimming())
                currentVolume = 1.0;
            else if (player.isCrouching() || player.isInWater())
                currentVolume = 0.6;
        }

        if (currentVolume > 0.1)
            currentVolume -= 0.02;
        else
            currentVolume = random.nextDouble() * 0.2;

        BufferBuilder buffer = Tessellator.getInstance().getBuilder();

        final MatrixStack stack = event.getMatrixStack();
        final Minecraft minecraft = Minecraft.getInstance();
        final TextureManager textureManager = minecraft.getTextureManager();
        final Integer windowWidth = minecraft.getWindow().getGuiScaledWidth();
        final Integer windowHeight = minecraft.getWindow().getGuiScaledHeight();

        final Integer offsetLeft = windowWidth - SIZE - 100;
        final Integer offsetTop = windowHeight - SIZE - 40;

        final double left = windowWidth - RADIUS - 100;
        final double top = windowHeight - RADIUS - 40;
        RenderSystem.disableDepthTest();

        RenderSystem.lineWidth(1.5f);

        RenderSystem.enableAlphaTest();
        RenderSystem.enableBlend();
        RenderSystem.defaultAlphaFunc();
        RenderSystem.defaultBlendFunc();

        textureManager.bind(gaugeImage);
        blit(stack, offsetLeft, offsetTop, SIZE);

        textureManager.bind(gaugeImageWhite);
        buffer.begin(GL11.GL_LINE_STRIP, DefaultVertexFormats.POSITION_COLOR_TEX);

        final double multiplier = 7 - (6 * (Math.max(currentVolume - 0.3, 0.0) +
                0.3));
        // final double multiplier = 1;

        if (player.tickCount % 4 == 0) {
            Double[] prePoints = new Double[10];
            Arrays.setAll(prePoints, p -> ThreadLocalRandom.current().nextDouble(-1.0, 1.0) * currentVolume);
            // Double[] prePoints = new Double[]
            // {
            //     random(), null, null, null, null, null, null, null, null, null, 
            //     null, null, null, null, null, null, null, null, null, null, 
            //     null, null, null, null, null, null, null, null, null, null, 
            //     null, null, null, null, null, null, null, null, null, null, 
            //     null, null, null, null, null, null, null, null, null, null, 
            //     null, null, null, null, null, null, null, null, null, null, 
            //     null, null, null, null, null, null, null, null, null, null, 
            //     null, null, null, null, null, null, null, null, null, null, 
            //     null, null, null, null, null, null, null, null, null, random(), 
            // };

            // int i = 0;
            // while (true)
            // {
            //     // i += random.nextInt(2) + 1;
            //     // i += 2;
            //     if (i >= prePoints.length) break;

            //     prePoints[i] = random();
            // }

            // points = Interpolator.Interpolate(prePoints, "cosine");
            // points = Interpolator.interpolate(prePoints, 20);

            points = Interpolator.interpolate(prePoints, 100);
        }

        if (currentPoints.length < 2)
            currentPoints = points.clone();

        // Intepolate to the goal point set...
        for (int i = 0; i < points.length; i++) {
            currentPoints[i] += (points[i] - currentPoints[i]) * 0.1;
        }

        for (int i = 0; i < currentPoints.length; i++) {
            double x = ((double) i / (double) currentPoints.length * (double) SIZE) * multiplier;
            double y = currentPoints[i] * (double) RADIUS;

            if (x < 0 || x > SIZE)
                continue;

            float u = Math.max(Math.min((float) x / (float) SIZE, 1), 0);
            float v = (float) currentPoints[i].doubleValue() / 2.0f + 0.5f;

            buffer.vertex(offsetLeft + x, top + y, 0)
                    .color(LINE_COLOR.red, LINE_COLOR.green, LINE_COLOR.blue, LINE_COLOR.alpha)
                    .uv(u, v)
                    .endVertex();
        }

        buffer.end();
        WorldVertexBufferUploader.end(buffer);

        RenderSystem.disableAlphaTest();
        RenderSystem.disableBlend();
        RenderSystem.enableDepthTest();

        // Minecraft.getInstance().font.drawShadow(stack, xs.toString(), 5, 5,
        // 16777215);
        // Minecraft.getInstance().font.drawShadow(stack, points.toString(), 5, 15,
        // 16777215);
        // Minecraft.getInstance().font.drawShadow(stack, String.valueOf(points.length),
        // 5, 25, 16777215);
        // Minecraft.getInstance().font.drawShadow(stack, String.valueOf(us.size()), 5,
        // 35, 16777215);
    }

    private static void blit(MatrixStack stack, Integer left, Integer top,
            Integer size) {
        AbstractGui.blit(stack, left, top, 0, 0, size, size, size, size);
    }
}

// buffer.vertex(left - RADIUS, top - 1, 25).color(1f, 1f, 1f, 1f).uv(0.5f,
// 0.5f).endVertex();
// buffer.vertex(left + RADIUS, top - 1, 25).color(1f, 1f, 1f, 1f).uv(0.5f,
// 0.5f).endVertex();
// buffer.vertex(left - RADIUS, top + 1, 25).color(1f, 1f, 1f, 1f).uv(0.5f,
// 0.5f).endVertex();
// buffer.vertex(left + RADIUS, top + 1, 25).color(1f, 1f, 1f, 1f).uv(0.5f,
// 0.5f).endVertex();

// final double[] pointMultipiliers = new double[] {
// 1.7, -0.8, 0.73, -0.65, 0.81, -0.69, 0.83, -0.75, 0.75, -0.75, 0.65, -0.78,
// 0.84, -0.86, 0.85, -0.8,
// 0.81, -0.75, 0.78, -0.75
// };

// buffer.vertex(left - 2000, top,
// 0)
// .color(LINE_COLOR.red, LINE_COLOR.green, LINE_COLOR.blue, LINE_COLOR.alpha)
// .uv(0.5f, 0.5f)
// // .uv2(SIZE, SIZE)
// .endVertex();

// for (int i = 0; i < pointMultipiliers.length; i++) {
// // textureManager.bind(new ResourceLocation(MODID,
// "textures/gauge/first.png"));

// buffer.vertex(left - RADIUS + i * (SIZE / (pointMultipiliers.length)),
// top + (pointMultipiliers[i] * RADIUS),
// 0)
// .color(LINE_COLOR.red, LINE_COLOR.green, LINE_COLOR.blue, LINE_COLOR.alpha)
// // .uv((float) (i / pointMultipiliers.length), 0.5f)
// // .uv((float) (i / (pointMultipiliers.length)), (float) (0.5f +
// // (pointMultipiliers[i] / 2)))
// // .uv(0.5f, (float) (0.5f - (pointMultipiliers[i] / 2)))
// .uv(0.5f, 0.5f)
// // .uv2(SIZE, SIZE)
// // .uv((float) (i / (pointMultipiliers.length - 1)), 0.55f)
// .endVertex();
// }